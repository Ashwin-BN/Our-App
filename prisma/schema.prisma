datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ----------------- USER -----------------
model User {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // for Credentials login
  accounts      Account[] @relation("UserAccounts")
  sessions      Session[] @relation("UserSessions")
  photos        Photo[]   @relation("UserPhotos")
  albums        Album[]   @relation("UserAlbums")
}

// ----------------- ACCOUNT -----------------
model Account {
  id                 String  @id @map("_id") @default(auto()) @db.ObjectId
  userId             String  @db.ObjectId
  user               User    @relation("UserAccounts", fields: [userId], references: [id])
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  @@unique([provider, providerAccountId])
}

// ----------------- SESSION -----------------
model Session {
  id           String   @id @map("_id") @default(auto()) @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation("UserSessions", fields: [userId], references: [id])
  expires      DateTime
}

// ----------------- PHOTO -----------------
model Photo {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  url       String
  userId    String   @db.ObjectId
  user      User     @relation("UserPhotos", fields: [userId], references: [id])
  albumId   String?  @db.ObjectId
  album     Album?   @relation("AlbumPhotos", fields: [albumId], references: [id])
  createdAt DateTime @default(now())
}

// ----------------- ALBUM -----------------
model Album {
  id          String   @id @map("_id") @default(auto()) @db.ObjectId
  name        String
  description String?
  cover       String?
  userId      String   @db.ObjectId
  user        User     @relation("UserAlbums", fields: [userId], references: [id])
  photos      Photo[]  @relation("AlbumPhotos")
  createdAt   DateTime @default(now())
}

// ----------------- VERIFICATION TOKEN -----------------
model VerificationToken {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
}
